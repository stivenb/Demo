apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: "Use the following credentials for login:\nJenkins: use your OpenShift credentials\nNexus: admin/admin123\nSonarQube: admin/admin\nGogs Git Server: gogs/gogs"
parameters:
- displayName: DEV project name
  value: dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: stage
  name: STAGE_PROJECT
  required: true
- displayName: Deploy Eclipse Che
  description: Deploy Eclipse Che in order to use as an online IDE for changing code in this demo
  value: "false"
  name: WITH_CHE
  required: true
- displayName: Ephemeral
  description: Use no persistent storage for Gogs and Nexus
  value: "true"
  name: EPHEMERAL
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
- displayName: Nexus IQ App Name
  description: Application name in Nexus IQ
  value: "pet-clinic"
  name: NEXUS_IQ_APP
  required: true
- displayName: Nexus IQ Username
  value: "admin"
  name: NEXUS_IQ_USER
  required: true
- displayName: Nexus IQ Password
  name: NEXUS_IQ_PASSWORD
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
- apiVersion: v1
  kind: Secret
  metadata:
    labels:
      credential.sync.jenkins.openshift.io: "true"
    name: nexus-iq
  type: Opaque
  stringData:
    password: ${NEXUS_IQ_PASSWORD}
    username: ${NEXUS_IQ_USER}
# Jenkins S2I
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: jenkins-iq
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: jenkins-build
  spec:
    source:                       
      git:
        uri: https://github.com/siamaksade/openshift-cd-demo.git
        ref: nexus
      contextDir: jenkins
      type: Git
    strategy:                     
      sourceStrategy:
        from:
          kind: ImageStreamTag
          name: jenkins:latest
          namespace: openshift
      type: Source
    output:                       
      to:
        kind: ImageStreamTag
        name: jenkins-iq:latest
    triggers:
      - imageChange:
        type: ImageChange
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: petclinic-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        jenkinsfile: |-
          def version, mvnCmd = "mvn"

          pipeline {
            agent {
              label 'maven'
            }
            stages {
              stage('Build App') {
                steps {
                  git url: 'http://gogs:3000/gogs/spring-petclinic.git'
                  script {
                      version = readMavenPom().version
                  }
                  sh "curl -o ~/.m2/settings.xml -sL https://raw.githubusercontent.com/siamaksade/devsecops-demo/master/support/settings.xml"
                  sh "${mvnCmd} install -DskipTests=true"
                }
              }
              stage('Test') {
                steps {
                  sh "${mvnCmd} test"
                  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
              }
              stage('Publish to Nexus Repo') {
                steps {
                  script {
                    sh "${mvnCmd} deploy -DskipTests=true"
                  }
                }
              }  
              stage('Code Analysis') {
                parallel {
                  stage('SonarQube Scan') {
                    steps {
                      script {
                        sh "mvn sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                      }
                    }
                  }
                  stage('IQ Scan Dev') {
                    steps {
                      nexusPolicyEvaluation(iqStage: 'build', iqApplication: 'pet-clinic')
                    }
                  }
                }        
              }
              stage('Build Image') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("bc", "spring-petclinic").startBuild("--from-file=target/spring-petclinic-${readMavenPom().version}.jar", "--wait=true")
                      }
                    }
                  }
                }
              }
              stage('Deploy DEV') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("dc", "spring-petclinic").rollout().latest();
                      }
                    }
                  }
                }
              }
              stage('IQ Scan Stage') {
                steps {
                  nexusPolicyEvaluation(iqStage: 'stage-release', iqApplication: 'pet-clinic')
                }
              }
              stage('Promote to STAGE?') {
                steps {
                  timeout(time:15, unit:'MINUTES') {
                      input message: "Promote to STAGE?", ok: "Promote"
                  }

                  script {
                    openshift.withCluster() {
                      openshift.tag("${env.DEV_PROJECT}/spring-petclinic:latest", "${env.STAGE_PROJECT}/spring-petclinic:${version}")
                    }
                  }
                }
              }
              stage('Deploy STAGE') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.STAGE_PROJECT) {
                        if (openshift.selector('dc', 'spring-petclinic').exists()) {
                          openshift.selector('dc', 'spring-petclinic').delete()
                          openshift.selector('svc', 'spring-petclinic').delete()
                          openshift.selector('route', 'spring-petclinic').delete()
                        }

                        openshift.newApp("spring-petclinic:${version}").narrow("svc").expose()
                        openshift.set("probe dc/spring-petclinic --readiness --get-url=http://:8080/manage/health --initial-delay-seconds=30 --failure-threshold=10 --period-seconds=10")
                        openshift.set("probe dc/spring-petclinic --liveness  --get-url=http://:8080/manage/health --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10")
                      }
                    }
                  }
                }
              }
            }
          }
          type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    maven-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>maven</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>maven</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>200m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
# Setup Demo
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-demo-installer
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            oc rollout cancel dc/jenkins
            oc rollout status dc/jenkins -w
            oc patch dc jenkins -n cicd -p '{"spec":{"triggers":[{"imageChangeParams": {"automatic": true,"containerNames": ["jenkins"],"from": {"kind": "ImageStreamTag","name": "jenkins-iq:latest"}},"type": "ImageChange"}]}}'
            oc set resources dc/jenkins --limits=memory=2Gi --requests=memory=512Mi 
            oc label dc jenkins app=jenkins --overwrite 
            oc rollout latest dc/jenkins 

            HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
            GOGS_HOSTNAME="gogs-$CICD_NAMESPACE.$HOSTNAME"

            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml \
                  --param=GOGS_VERSION=0.11.34 \
                  --param=HOSTNAME=$GOGS_HOSTNAME \
                  --param=SKIP_TLS_VERIFY=true
            else
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-persistent-template.yaml \
                  --param=GOGS_VERSION=0.11.34 \
                  --param=HOSTNAME=$GOGS_HOSTNAME \
                  --param=SKIP_TLS_VERIFY=true
            fi
            
            sleep 5

            oc new-app -f http://bit.ly/openshift-sonarqube-embedded-template --param=SONARQUBE_VERSION=7.0 --param=SONAR_MAX_MEMORY=4Gi

            if [ "${WITH_CHE}" == "true" ] ; then
              oc process -f https://raw.githubusercontent.com/minishift/minishift-addons/master/add-ons/che/templates/che-single-user.yml \
                --param PROJECT_NAME=$CICD_NAMESPACE \
                --param DOMAIN_NAME=$HOSTNAME \
                --param OPENSHIFT_OAUTH_TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                | oc create -f -

              oc set resources dc/che --limits=cpu=1,memory=2Gi --requests=cpu=200m,memory=512Mi
            fi

            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.12.0 --param=MAX_MEMORY=2Gi
            else
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-persistent-template.yaml --param=NEXUS_VERSION=3.12.0 --param=MAX_MEMORY=2Gi
            fi

            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus-iq-template.yaml
            else
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus-iq-persistent-template.yaml
            fi
            
            GOGS_SVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
            GOGS_USER=gogs
            GOGS_PWD=gogs

            oc rollout status dc gogs

            _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
              --form user_name=$GOGS_USER \
              --form password=$GOGS_PWD \
              --form retype=$GOGS_PWD \
              --form email=admin@gogs.com)

            sleep 5

            if [ $_RETURN != "200" ] && [ $_RETURN != "302" ] ; then
              echo "ERROR: Failed to create Gogs admin"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 10

            cat <<EOF > /tmp/data.json
            {
              "clone_addr": "https://github.com/siamaksade/spring-petclinic.git",
              "uid": 1,
              "repo_name": "spring-petclinic"
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ;then
              echo "ERROR: Failed to imported spring-petclinic GitHub repo"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 5

            cat <<EOF > /tmp/data.json
            {
              "type": "gogs",
              "config": {
                "url": "https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$CICD_NAMESPACE/buildconfigs/petclinic-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
                "content_type": "json"
              },
              "events": [
                "push"
              ],
              "active": true
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/spring-petclinic/hooks -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ; then
              echo "ERROR: Failed to set webhook"
              cat /tmp/curl.log
              exit 255
            fi
          image: openshift/origin:v3.9.0
          name: cicd-demo-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never